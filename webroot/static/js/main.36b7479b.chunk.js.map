{"version":3,"sources":["js/App.js","serviceWorker.js","index.js"],"names":["TableRows","services","onDelete","rows","map","s","name","url","date","status","className","servicename","onClick","AddNewServiceModal","props","Modal","show","onHide","aria-labelledby","centered","animation","Header","closeButton","Title","id","Body","Form","noValidate","validated","onSubmit","onSave","Group","Label","Control","required","type","onChange","onSetServiceAttribute","value","service","Feedback","Button","App","useState","setServices","newService","setNewService","editedService","setEditedService","modalShow","setModalShow","setValidated","useEffect","fetchAllServices","fetch","then","response","json","serviceList","saveService","method","headers","body","JSON","stringify","concat","application","aria-label","e","serviceName","target","getAttribute","filter","currentTarget","checkValidity","preventDefault","stopPropagation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8RAsGA,IAAMA,EAAY,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACrBC,EAAOF,EAASG,KAAI,SAAAC,GAAC,OACvB,+BACI,6BAAKA,EAAEC,OACP,6BAAKD,EAAEE,MACP,6BAAKF,EAAEG,OACP,6BAAKH,EAAEI,SACP,+BAAI,sBAAMC,UAAU,eAAeC,YAAaN,EAAEC,KAA9C,kBAAJ,MAAsE,sBAAMI,UAAU,eAAeC,YAAaN,EAAEC,KAAMM,QAASV,EAA7D,yBALjEG,EAAEC,SASf,OAAO,uBAAOI,UAAU,cAAjB,SACFP,KAIT,SAASU,EAAmBC,GACxB,OACI,eAACC,EAAA,EAAD,CACIC,KAAMF,EAAME,KACZC,OAAQH,EAAMG,OACdC,kBAAgB,gCAChBC,UAAQ,EACRC,WAAW,EALf,UAOI,cAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACP,EAAA,EAAMQ,MAAP,CAAaC,GAAG,gCAAhB,+BAIJ,cAACT,EAAA,EAAMU,KAAP,UACI,eAACC,EAAA,EAAD,CAAMC,YAAU,EAACC,UAAWd,EAAMc,UAAWC,SAAUf,EAAMgB,OAA7D,UACI,eAACJ,EAAA,EAAKK,MAAN,WACI,cAACL,EAAA,EAAKM,MAAN,2BACA,cAACN,EAAA,EAAKO,QAAN,CAAcC,UAAQ,EAACC,KAAK,OAAO7B,KAAK,OAAO8B,SAAUtB,EAAMuB,sBAAuBC,MAAOxB,EAAMyB,QAAQjC,OAC3G,cAACoB,EAAA,EAAKO,QAAQO,SAAd,CAAuBL,KAAK,UAA5B,8CAEJ,eAACT,EAAA,EAAKK,MAAN,WACI,cAACL,EAAA,EAAKM,MAAN,0BACA,cAACN,EAAA,EAAKO,QAAN,CAAcC,UAAQ,EAACC,KAAK,OAAO7B,KAAK,MAAM8B,SAAUtB,EAAMuB,sBAAuBC,MAAOxB,EAAMyB,QAAQhC,MAC1G,cAACmB,EAAA,EAAKO,QAAQO,SAAd,CAAuBL,KAAK,UAA5B,6CAEJ,cAACM,EAAA,EAAD,CAAQN,KAAK,SAAb,0BAOLO,MAlJf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACJ1C,EADI,KACM2C,EADN,OAEyBD,mBAAS,IAFlC,mBAEJE,EAFI,KAEQC,EAFR,OAG+BH,mBAAS,IAHxC,mBAGJI,EAHI,KAGWC,EAHX,OAIuBL,oBAAS,GAJhC,mBAIJM,EAJI,KAIOC,EAJP,OAKuBP,oBAAS,GALhC,mBAKJf,EALI,KAKOuB,EALP,KAOXC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAmB,WACrBC,MAAM,iCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAW,OAAId,EAAYc,OAmBnCC,EAAc,SAACd,GACjBS,MAAM,gCAAiC,CACnCM,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUnB,KAExBU,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhB,GAAO,OAAKK,EAAY3C,EAASgE,OAAO,CAAC1B,QAE/CW,GAAa,GACbJ,EAAc,IACdE,EAAiB,KAkBrB,OACI,sBAAKxB,GAAG,UAAR,UACI,qBAAKA,GAAG,YAAYd,UAAU,YAAYwD,YAAY,QAAQC,aAAW,gBAAzE,SACI,wBAAQhC,KAAK,SAASzB,UAAU,yBAAyBE,QAlDpD,WACbsC,GAAa,GACbC,GAAa,IAgDL,uBAEJ,8BACI,wBAAO3B,GAAG,gBAAgBd,UAAU,QAApC,UACI,uBAAOA,UAAU,cAAjB,SACI,+BACI,sCACA,qCACA,6CACA,wCACA,6CAGR,cAAC,EAAD,CAAWT,SAAUA,EAAUC,SA/B9B,SAACkE,GACd,IAAMC,EAAcD,EAAEE,OAAOC,aAAa,eAC1CjB,MAAM,iCAAmCe,EAAa,CAClDT,OAAQ,WACTL,MAAK,SAAAC,GAAQ,OAAIZ,EAAY3C,EAASuE,QAAO,SAAAnE,GAAC,OAAIA,EAAEC,OAAS+D,iBA8B5D,8BACI,cAACxD,EAAD,CACIG,KAAMiC,EACNhC,OA9BI,WAChBiC,GAAa,IA8BDpB,OAjED,SAACsC,IAEiB,IADhBA,EAAEK,cACNC,iBACLN,EAAEO,iBACFP,EAAEQ,kBACFzB,GAAa,IAEbQ,EAAYd,IA2DJjB,UAAWA,EACXS,sBA7Bc,SAAC+B,GAC3BtB,EAAc,2BAAID,GAAL,kBAAkBuB,EAAEE,OAAOhE,KAAO8D,EAAEE,OAAOhC,UA6B5CC,QAASQ,UCnFT8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.36b7479b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../css/App.css';\nimport '../css/bootstrap.min.css';\nimport { Button, Modal, Form } from 'react-bootstrap';\n\nfunction App() {\n    const [services, setServices] = useState([]);\n    const [newService, setNewService] = useState({});\n    const [editedService, setEditedService] = useState({});\n    const [modalShow, setModalShow] = useState(false);\n    const [validated, setValidated] = useState(false);\n\n    useEffect(() => {\n        fetchAllServices();\n    }, []);\n\n    const fetchAllServices = () => {\n        fetch('http://localhost:8080/service')\n            .then(response => response.json())\n            .then(serviceList => setServices(serviceList));\n    }\n\n    const onAddNew = () => {\n        setModalShow(true);\n        setValidated(false);\n    }\n\n    const onSave = (e) => {\n        const form = e.currentTarget;\n        if (form.checkValidity() === false) {\n            e.preventDefault();\n            e.stopPropagation();\n            setValidated(true);\n        } else {\n            saveService(newService);\n        }\n    }\n\n    const saveService = (newService) => {\n        fetch('http://localhost:8080/service', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newService),\n        })\n        .then(response => response.json())\n        .then(service =>  setServices(services.concat([service])));\n\n        setModalShow(false);\n        setNewService({});\n        setEditedService({});\n    }\n\n    const onDelete = (e) => {\n        const serviceName = e.target.getAttribute('servicename');\n        fetch('http://localhost:8080/service/' + serviceName, {\n            method: 'DELETE'\n        }).then(response => setServices(services.filter(s => s.name !== serviceName)));\n    }\n\n    const onHideModal = () => {\n        setModalShow(false);\n    }\n\n    const onSetServiceAttribute = (e) => {\n        setNewService({...newService, [e.target.name]: e.target.value});\n    }\n\n    return (\n        <div id=\"mainDiv\">\n            <div id=\"buttonDiv\" className=\"btn-group\" application=\"group\" aria-label=\"Basic example\">\n                <button type=\"button\" className=\"btn btn-primary btn-sm\" onClick={onAddNew}>Add New</button>\n            </div>\n            <div>\n                <table id=\"servicesTable\" className=\"table\">\n                    <thead className=\"thead-light\">\n                        <tr>\n                            <th>Name</th>\n                            <th>URL</th>\n                            <th>Create Date</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <TableRows services={services} onDelete={onDelete}/>\n                </table>\n            </div>\n            <div>\n                <AddNewServiceModal\n                    show={modalShow}\n                    onHide={onHideModal}\n                    onSave={onSave}\n                    validated={validated}\n                    onSetServiceAttribute={onSetServiceAttribute}\n                    service={editedService}\n                />\n            </div>\n        </div>\n    );\n}\n\nconst TableRows = ({ services, onDelete }) => {\n    const rows = services.map(s =>\n        <tr key={s.name}>\n            <td>{s.name}</td>\n            <td>{s.url}</td>\n            <td>{s.date}</td>\n            <td>{s.status}</td>\n            <td><span className=\"actionButton\" servicename={s.name}>Edit</span> | <span className=\"actionButton\" servicename={s.name} onClick={onDelete}>Delete</span></td>\n        </tr>\n    );\n\n    return <tbody className=\"thead-light\">\n        {rows}\n    </tbody>;\n}\n\nfunction AddNewServiceModal(props) {\n    return (\n        <Modal\n            show={props.show}\n            onHide={props.onHide}\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            animation={false}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Add new service\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form noValidate validated={props.validated} onSubmit={props.onSave}>\n                    <Form.Group>\n                        <Form.Label>Service Name</Form.Label>\n                        <Form.Control required type=\"text\" name=\"name\" onChange={props.onSetServiceAttribute} value={props.service.name}/>\n                        <Form.Control.Feedback type=\"invalid\">Please choose a service name.</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Service URL</Form.Label>\n                        <Form.Control required type=\"text\" name=\"url\" onChange={props.onSetServiceAttribute} value={props.service.url}/>\n                        <Form.Control.Feedback type=\"invalid\">Please choose a service URL.</Form.Control.Feedback>\n                    </Form.Group>\n                    <Button type=\"submit\">Save</Button>\n                </Form>\n            </Modal.Body>\n        </Modal>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './js/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}